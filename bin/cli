#!/usr/bin/env node

var argv =  require('optimist')
            .usage('Usage:\n $0 --file [script file] --verbose')
            .argv;

repl = require('repl');
tools = require('../script_tools.js');

MASCP = require('../dist/js/mascp-jstools.services.js');

MASCP.events.once('ready',function() {
    MASCP.Service.addListener("requestIncomplete",function() {
        console.log("Request did not complete - waiting");
    });

    if (argv.file)  {
        var path = argv.file.substr(0,1) == '/' ? argv.file : process.cwd()+'/'+argv.file ;
        global.argv = argv;
        var evaled = require(path);
        if (evaled instanceof Function) {
            evaled.call(null,argv);            
        }
        return;
    }
    if (! require('tty').isatty(process.stdin)) {
        var vm = require('vm');
        vm.runInNewContext(fs.readFileSync('/dev/stdin').toString(), { require: require, console: console, MASCP: MASCP, module: module }, "<stdin>");
        return;
    }
    repl.start("MASCP tools> ");
    for (func in tools) {
        repl.repl.context[func] = tools[func];
    }
    
    var old_completer = repl.repl.complete;    
    repl.repl.complete = function(line,callback) {
        var original_line = line;
        if (line.match(/\([^\)]*$/)) {            
            var func_parts = line.split(/\(/).reverse();
            var variables = func_parts.shift();
            var fname = func_parts.shift();
            var set_vars = variables.split(/,/).filter(function(v) { if (v == '') { return false; } return true; });
            if (tools[fname]) {
                var func_def = tools[fname].toString();
                var match = func_def.match(/function\s*\(([^\)]*)\)/);
                if (match) {
                    var args = match[1].split(/,/);
                    var close_quote = '';
                    if (set_vars.length > 0 && set_vars[set_vars.length - 1].match(/^['"][^'"]*$/)) {
                        close_quote = set_vars[set_vars.length - 1][0];
                    }

                    var handle_set_vars = function(last_vars) {
                        if (! last_vars ) {
                            last_vars = [[]];
                        }
                        if (last_vars[0].length > 1) {
                            var lines = [];
                            var a_line = line.replace(/[^\(,]*$/,'');
                            last_vars[0].forEach(function(word) {
                                lines.push(a_line+word);
                            });
                            callback(null,[lines,original_line]);
                            return;
                        } else if (last_vars[0].length == 1) {
                            var a_line = line.replace(/[^\(,]*$/,'');
                            line = a_line + last_vars[0][0];
                        }

                        if (set_vars.length == args.length) {
                            callback(null,[[line+close_quote+")"],original_line]);
                            return;
                        }
                        args.splice(0,set_vars.length);

                        callback(null,[[line+close_quote+(line.match(/[\(,]$/) ? '' : ',')+args[0]+((args.length == 1) ? ")" : ",")],original_line]);
                    }

                    if (set_vars.length > 0) {
                        old_completer.call(repl.repl,set_vars[set_vars.length - 1],function(comps) {
                            handle_set_vars(comps);
                        });
                    } else {
                        handle_set_vars([[]]);
                    }
                    return;
                }
            }
        }
        old_completer.call(repl.repl,line,function(obj,comps) {
            comps[0].forEach(function(k,i) {
                if (tools[k]) {
                    comps[0][i] += '(';
                }
            });
            callback(null,comps);
        });
    };
});
MASCP.events.emit('ready');