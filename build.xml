<project xmlns:ivy="antlib:org.apache.ivy.ant" default="dist">

    <property name="project.java.extlib.dir" value="${basedir}/extlib/java"/>
    
    <property name="project.temp.dir" value="temp"/>
    
    <property name="apidoc.dir" value="${basedir}/doc"/>
    
    <property name="javascript.dir" value="js"/>

    <property name="jsdoc.version" value="2.3.2" />

    <property name="ivy.install.version" value="2.1.0-rc1" />
    
    <property name="ivy.jar.filename" value="ivy-${ivy.install.version}.jar"/>

    <property name="ivy.jar.file" value="${project.java.extlib.dir}/${ivy.jar.filename}" />
    
    
    <!-- TARGET: resolve-external-dependencies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Uses Ivy to resolve and download dependant library jars for the project.
    -->
    <target name="resolve-external-dependencies" depends="install-ivy" description="Check and update 3rd party project dependencies">
        <echo>Deleting old jars from ${project.java.extlib.dir}</echo>
        <delete>
            <fileset dir="${project.java.extlib.dir}" includes="*.jar" excludes="${ivy.jar.filename}"/>
        </delete>
        <ivy:settings file="ivysettings.xml" />
        <ivy:retrieve pattern="${project.java.extlib.dir}/[artifact]-[revision].[ext]" type="jar" />

        <ivy:retrieve pattern="js/[artifact]-[revision].[ext]" type="js"/>

    </target>


    <!-- TARGET: install-ivy ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Installs ivy after downloading.
    -->
    <target name="install-ivy" depends="" description="Installs ivy">

        <mkdir dir="${project.java.extlib.dir}"/>
        
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" 
             usetimestamp="true" 
         />
    
         <path id="ivy.lib.path">
            <fileset dir="${project.java.extlib.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <!-- TARGET: update ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    -->
    <target name="update" depends="resolve-external-dependencies" description="Gets libraries" />

    <target name="build-jsdocs" description="Creates javadoc from sources in src/js">
        
        <mkdir dir="${project.temp.dir}"/>
        <mkdir dir="${apidoc.dir}/js"/>
        
        <unzip src="${project.java.extlib.dir}/jsdoc-dist-${jsdoc.version}.zip" dest="${project.temp.dir}/jsdoc-toolkit"/>
        <taskdef name="jsdoctoolkit" classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit" >
            <classpath>
                <fileset dir="${project.java.extlib.dir}" includes="**/*.jar"/>
            </classpath>
        </taskdef>
        <echo>Making jsdoc in ${apidoc.dir}/js from ${javascript.dir}</echo>
        <jsdoctoolkit jsdochome="${project.temp.dir}/jsdoc-toolkit/jsdoc_toolkit-${jsdoc.version}/jsdoc-toolkit/" template="jsdoc" outputdir="${apidoc.dir}/js">
            <fileset dir="${javascript.dir}">
                <include name="lib/*.js"/>
            </fileset>
        </jsdoctoolkit>
    </target>

    <target name="build" description="Build the minified js files">
        <taskdef name="jsmin"
                classname="net.matthaynes.jsmin.JSMin_Task">
                <classpath>
                    <fileset dir="${project.java.extlib.dir}" includes="**/*.jar"/>
                </classpath>                
        </taskdef>
        
        <mkdir dir="build"/>
        
        <concat destfile="build/mascp-jstools.services.js"
                  force="yes">
            <fileset dir="js/lib" includes="MascpService.js"/>
            <fileset dir="js/lib" includes="*Reader.js"/>
            <fileset dir="js/lib" includes="*Runner.js"/>
            <fileset dir="js/lib" includes="MascotToJSON.js"/>
        </concat>
        <concat destfile="build/mascp-jstools.map.js"
                  force="yes">
            <fileset dir="js/lib" includes="gomap.js"/>                  
        </concat>
        <concat destfile="build/mascp-jstools.renderers.js"
                  force="yes">
            <fileset dir="js/lib" includes="SequenceRenderer.js"/>
            <fileset dir="js/lib" includes="SVGCanvas.js" />
            <fileset dir="js/lib" includes="CondensedSequenceRenderer.js"/>
            <fileset dir="js/lib" includes="CondensedSequenceRendererNavigation.js"/>
            <fileset dir="js/lib" includes="TagVisualisation.js"/>
        </concat>

        <concat destfile="build/mascp-jstools.js" force="yes">
            <fileset dir="js" includes="bean.js"/>
            <fileset dir="build" includes="mascp-jstools.services.js"/>
            <fileset dir="build" includes="mascp-jstools.renderers.js"/>
            <fileset dir="build" includes="mascp-jstools.map.js"/>
        </concat>

    </target>

	<target depends="build" name="dist" description="Generate a distribution directory for the app">

        <taskdef name="jsmin"
                classname="net.matthaynes.jsmin.JSMin_Task">
                <classpath>
                    <fileset dir="${project.java.extlib.dir}" includes="**/*.jar"/>
                </classpath>                
        </taskdef>

        <mkdir dir="dist/js" />

        <jsmin destdir="dist/js" suffix="true">
            <fileset dir="build" includes="mascp-jstools*.js"/>
        </jsmin>

        <copy todir="dist/js">
            <fileset dir="build" includes="mascp-jstools*.js"/>
        </copy>

    </target>

</project>
